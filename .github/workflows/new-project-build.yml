name: 新規プロジェクト ビルドテスト

on:
  # push:
  #   branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # 手動実行を許可

env:
  XCODE_VERSION: '16.2'
  SCHEME: 'BottleKeeper'
  PROJECT_PATH: 'BottleKeeper.xcodeproj'
  BUNDLE_ID: 'com.bottlekeep.whiskey'

jobs:
  # プロジェクト構造確認
  project-check:
    name: プロジェクト構造確認
    runs-on: macos-15

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: Xcodeバージョンを設定
        run: |
          sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
          xcodebuild -version

      - name: プロジェクト構造を詳細確認
        run: |
          echo "=== ルートディレクトリ ==="
          ls -la

          echo "=== Xcodeプロジェクトファイル ==="
          ls -la BottleKeeper.xcodeproj/

          echo "=== BottleKeeperディレクトリ ==="
          ls -la BottleKeeper/

          echo "=== アプリディレクトリ ==="
          ls -la BottleKeeper/App/ || echo "Appディレクトリが見つかりません"

          echo "=== Viewsディレクトリ ==="
          ls -la BottleKeeper/Views/ || echo "Viewsディレクトリが見つかりません"

          echo "=== Modelsディレクトリ ==="
          ls -la BottleKeeper/Models/ || echo "Modelsディレクトリが見つかりません"

          echo "=== Servicesディレクトリ ==="
          ls -la BottleKeeper/Services/ || echo "Servicesディレクトリが見つかりません"

          echo "=== Assets ==="
          ls -la BottleKeeper/Assets.xcassets/ || echo "Assetsが見つかりません"

          echo "=== Core Dataモデル ==="
          ls -la BottleKeeper/BottleKeeper.xcdatamodeld/ || echo "Core Dataモデルが見つかりません"

      - name: Xcodeプロジェクト設定確認
        run: |
          echo "=== プロジェクト情報 ==="
          xcodebuild -list -project ${{ env.PROJECT_PATH }}

  # 基本ビルドテスト
  build-test:
    name: 基本ビルドテスト
    runs-on: macos-15
    needs: project-check

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: Xcodeバージョンを設定
        run: |
          sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
          xcodebuild -version

      - name: iOS シミュレータで基本ビルド
        run: |
          echo "=== iOS シミュレータでビルドテスト ==="

          # 利用可能なシミュレータを確認
          echo "=== 利用可能なシミュレータ ==="
          xcrun simctl list devices available | grep iPhone

          echo "=== 基本ビルド実行 ==="
          xcodebuild build \
            -project ${{ env.PROJECT_PATH }} \
            -scheme ${{ env.SCHEME }} \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro' \
            -configuration Debug \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO

          echo "✅ iOS シミュレータビルド成功"

      - name: ビルド設定の確認
        run: |
          echo "=== ビルド設定確認 ==="
          xcodebuild -showBuildSettings \
            -project ${{ env.PROJECT_PATH }} \
            -scheme ${{ env.SCHEME }} \
            -configuration Debug \
            | grep -E "(PRODUCT_BUNDLE_IDENTIFIER|IPHONEOS_DEPLOYMENT_TARGET|SUPPORTED_PLATFORMS|SWIFT_VERSION)"

  # 構文チェック（Swift構文確認）
  syntax-check:
    name: Swift構文チェック
    runs-on: macos-15
    needs: project-check

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: Xcodeバージョンを設定
        run: |
          sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app

      - name: Swift構文チェック
        run: |
          echo "=== Swift構文チェック ==="
          find BottleKeeper -name "*.swift" | while read file; do
            echo "チェック中: $file"
            xcrun swiftc -parse "$file" -target arm64-apple-ios26.0 || echo "警告: $file に構文エラーの可能性があります"
          done
          echo "✅ Swift構文チェック完了"

  # アーカイブビルドテスト（署名なし）
  archive-test:
    name: アーカイブビルドテスト
    runs-on: macos-15
    needs: build-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: Xcodeバージョンを設定
        run: |
          sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
          xcodebuild -version

      - name: アーカイブビルド（署名なし）
        run: |
          echo "=== アーカイブビルドテスト ==="
          xcodebuild archive \
            -project ${{ env.PROJECT_PATH }} \
            -scheme ${{ env.SCHEME }} \
            -destination 'generic/platform=iOS' \
            -archivePath $RUNNER_TEMP/BottleKeeper.xcarchive \
            -configuration Debug \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            -quiet

          echo "✅ アーカイブビルド成功"

          echo "=== アーカイブ内容確認 ==="
          ls -la $RUNNER_TEMP/BottleKeeper.xcarchive/

      - name: アーカイブをアップロード
        uses: actions/upload-artifact@v4
        with:
          name: BottleKeeper-Archive-Debug
          path: ${{ runner.temp }}/BottleKeeper.xcarchive/

  # 結果サマリー
  build-summary:
    name: ビルド結果サマリー
    runs-on: ubuntu-latest
    needs: [project-check, build-test, syntax-check, archive-test]
    if: always()

    steps:
      - name: 結果サマリー
        run: |
          echo "## 🍾 BottleKeeper ビルド結果サマリー" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "| ジョブ | 結果 |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| プロジェクト構造確認 | ${{ needs.project-check.result == 'success' && '✅ 成功' || '❌ 失敗' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 基本ビルドテスト | ${{ needs.build-test.result == 'success' && '✅ 成功' || '❌ 失敗' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Swift構文チェック | ${{ needs.syntax-check.result == 'success' && '✅ 成功' || '❌ 失敗' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| アーカイブビルドテスト | ${{ needs.archive-test.result == 'success' && '✅ 成功' || needs.archive-test.result == 'skipped' && '⏭️ スキップ' || '❌ 失敗' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.build-test.result }}" == "success" ]]; then
            echo "🎉 **新規プロジェクトのビルドが成功しました！**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📱 対応環境" >> $GITHUB_STEP_SUMMARY
            echo "- iOS 26.0+" >> $GITHUB_STEP_SUMMARY
            echo "- iPadOS 26.0+" >> $GITHUB_STEP_SUMMARY
            echo "- SwiftUI + Core Data" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **ビルドに問題があります。ログを確認してください。**" >> $GITHUB_STEP_SUMMARY
          fi