name: iOS シンプルビルドテスト

on:
  workflow_dispatch: # 手動実行のみ

jobs:
  simple-build:
    name: シンプルビルドテスト
    runs-on: macos-14

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: Xcodeバージョンを設定
        run: |
          sudo xcode-select -s /Applications/Xcode_15.0.app
          xcodebuild -version

      - name: Swift Packageから.xcodeprojを生成
        run: |
          echo "=== Swift Packageから.xcodeprojを生成 ==="
          swift package generate-xcodeproj --skip-extra-files

          echo "=== 生成されたファイルを確認 ==="
          ls -la *.xcodeproj

      - name: プロジェクト情報を確認
        run: |
          echo "=== プロジェクト構造を確認 ==="
          PROJECT_FILE=$(ls *.xcodeproj | head -1)
          echo "プロジェクトファイル: $PROJECT_FILE"

          echo "=== 利用可能なスキームを確認 ==="
          xcodebuild -project "$PROJECT_FILE" -list

          echo "=== ターゲット情報を確認 ==="
          xcodebuild -project "$PROJECT_FILE" -list | grep -A 10 "Targets:"

      - name: シンプルビルドテスト
        run: |
          PROJECT_FILE=$(ls *.xcodeproj | head -1)
          echo "使用するプロジェクト: $PROJECT_FILE"

          # 最初に見つかったスキームを使用
          SCHEME=$(xcodebuild -project "$PROJECT_FILE" -list | grep -A 20 "Schemes:" | grep -v "Schemes:" | head -1 | xargs)
          echo "使用するスキーム: $SCHEME"

          echo "=== ビルドテストを実行 ==="
          xcodebuild build \
            -project "$PROJECT_FILE" \
            -scheme "$SCHEME" \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
            -configuration Debug \
            || echo "ビルドに失敗しましたが、続行します"

      - name: 詳細ログ表示
        if: always()
        run: |
          echo "=== 最終的な構造確認 ==="
          find . -name "*.xcodeproj" -exec ls -la {} \;

          echo "=== Swift Package情報 ==="
          swift package describe --type json | jq '.' || echo "jqが利用できません"

      - name: 証明書設定テスト
        run: |
          echo "=== GitHub Secrets確認 ==="
          echo "BUILD_CERTIFICATE_BASE64 length: ${#BUILD_CERTIFICATE_BASE64}"
          echo "P12_PASSWORD length: ${#P12_PASSWORD}"
          echo "TEAM_ID: $TEAM_ID"

          if [ -n "$BUILD_CERTIFICATE_BASE64" ]; then
            echo "✅ 証明書Secret設定済み"
          else
            echo "❌ 証明書Secretが設定されていません"
          fi
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          TEAM_ID: ${{ secrets.TEAM_ID }}