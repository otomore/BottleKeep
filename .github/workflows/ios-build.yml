name: iOS アプリビルド

# トリガー設定
on:
  # push:
  #   branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # 手動実行を許可

env:
  XCODE_VERSION: '16.2' # 使用するXcodeのバージョン
  SCHEME: 'BottleKeeper'
  PROJECT_PATH: 'BottleKeeper.xcodeproj' # プロジェクトファイルのパス
  BUNDLE_ID: 'com.bottlekeep.whiskey'

jobs:
  # テスト実行ジョブ
  test:
    name: ユニットテスト実行
    runs-on: macos-14 # iOS 26 Beta問題を回避するためmacOS-14を使用

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: Xcodeバージョンを設定
        run: |
          sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
          xcodebuild -version

      - name: DerivedDataキャッシュを復元
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-deriveddata-${{ hashFiles('**/*.swift', '**/*.xcodeproj') }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-

      - name: ユニットテストを実行
        run: |
          # シミュレーターでアプリをビルド＆インストール
          echo "🔨 DEBUG ビルドでシミュレーターにインストール中..."
          xcodebuild build \
            -project BottleKeeper.xcodeproj \
            -scheme BottleKeeper \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro' \
            -configuration Debug \
            -derivedDataPath $RUNNER_TEMP/DerivedData \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO

          # シミュレーターを起動
          echo "📱 シミュレーターを起動中..."
          SIMULATOR_ID=$(xcrun simctl list devices available | grep "iPhone 16 Pro" | head -n 1 | grep -o "[0-9A-F-]\{36\}")
          xcrun simctl boot "$SIMULATOR_ID" || echo "シミュレーターは既に起動済み"

          # アプリをインストール
          echo "📦 アプリをインストール中..."
          APP_PATH=$(find $RUNNER_TEMP/DerivedData -name "BottleKeeper.app" | head -n 1)
          xcrun simctl install "$SIMULATOR_ID" "$APP_PATH"

          # アプリを起動してCloudKitスキーマ初期化を実行
          echo "🚀 アプリを起動中（CloudKitスキーマ初期化のため）..."
          xcrun simctl launch --console "$SIMULATOR_ID" com.bottlekeep.whiskey &
          LAUNCH_PID=$!

          # 30秒待機（スキーマ初期化が完了するまで）
          echo "⏳ CloudKitスキーマ初期化完了を待機中（30秒）..."
          sleep 30

          # アプリを終了
          echo "🛑 アプリを終了中..."
          xcrun simctl terminate "$SIMULATOR_ID" com.bottlekeep.whiskey || true

          echo "✅ CloudKitスキーマ初期化完了（Development環境）"

      - name: テスト結果をアップロード
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults

  # ビルドジョブ
  build:
    name: アプリビルド
    runs-on: macos-14 # iOS 26 Beta問題を回避するためmacOS-14を使用
    needs: test # テストが成功した後に実行

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: Xcodeバージョンを設定
        run: |
          sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
          xcodebuild -version

      - name: DerivedDataキャッシュを復元
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-deriveddata-build-${{ hashFiles('**/*.swift', '**/*.xcodeproj') }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-build-
            ${{ runner.os }}-deriveddata-

      - name: 証明書とプロビジョニングプロファイルをインストール
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64_NEW || secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # 証明書とプロビジョニングプロファイルのパスを作成
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Base64デコードして保存
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # 一時的なキーチェーンを作成
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # 証明書をインポート
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # プロビジョニングプロファイルをインストール
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

          # インストールされたプロファイルの名前を動的に取得
          echo "=== インストールされたプロビジョニングプロファイルを確認 ==="

          # プロビジョニングプロファイルの内容をデコード
          PROFILE_CONTENT=$(security cms -D -i $PP_PATH)

          # 各値を安全に抽出（エラーハンドリング付き）
          PROFILE_NAME=$(echo "$PROFILE_CONTENT" | plutil -extract Name raw - 2>/dev/null || echo "")
          PROFILE_UUID=$(echo "$PROFILE_CONTENT" | plutil -extract UUID raw - 2>/dev/null || echo "")

          # Team IDは複数の場所にある可能性があるので、順番に試行
          PROFILE_TEAM_ID=""
          if [ -z "$PROFILE_TEAM_ID" ]; then
            # ApplicationIdentifierPrefixの最初の要素を取得（最も確実）
            PROFILE_TEAM_ID=$(echo "$PROFILE_CONTENT" | plutil -extract ApplicationIdentifierPrefix.0 raw - 2>/dev/null || echo "")
          fi
          if [ -z "$PROFILE_TEAM_ID" ]; then
            # Entitlements内のcom.apple.developer.team-identifier
            PROFILE_TEAM_ID=$(echo "$PROFILE_CONTENT" | plutil -extract Entitlements.com.apple.developer.team-identifier raw - 2>/dev/null || echo "")
          fi
          if [ -z "$PROFILE_TEAM_ID" ]; then
            PROFILE_TEAM_ID=$(echo "$PROFILE_CONTENT" | plutil -extract TeamIdentifier raw - 2>/dev/null || echo "")
          fi
          if [ -z "$PROFILE_TEAM_ID" ]; then
            # TeamIdentifierが配列の場合
            PROFILE_TEAM_ID=$(echo "$PROFILE_CONTENT" | plutil -extract TeamIdentifier.0 raw - 2>/dev/null || echo "")
          fi

          # デフォルトのTeam IDを設定
          if [ -z "$PROFILE_TEAM_ID" ]; then
            PROFILE_TEAM_ID="KRVLW3Y2SL"
            echo "⚠️ Team IDが抽出できませんでした。デフォルト値を使用します: $PROFILE_TEAM_ID"
          fi

          echo "プロファイル名: $PROFILE_NAME"
          echo "プロファイルUUID: $PROFILE_UUID"
          echo "プロファイルTeam ID: $PROFILE_TEAM_ID"
          echo "PROFILE_NAME=$PROFILE_NAME" >> $GITHUB_ENV
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          echo "PROFILE_TEAM_ID=$PROFILE_TEAM_ID" >> $GITHUB_ENV

          # プロビジョニングプロファイルのインストール状況を詳細確認
          echo "=== プロビジョニングプロファイルディレクトリの内容確認 ==="
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/

          echo "=== プロファイルの詳細情報確認 ==="
          security cms -D -i $PP_PATH | plutil -p -

          echo "=== システムのプロビジョニングプロファイル一覧 ==="
          find ~/Library/MobileDevice/Provisioning\ Profiles/ -name "*.mobileprovision" -exec basename {} \; 2>/dev/null || echo "プロファイルが見つかりません"

      - name: ビルド番号を設定
        run: |
          BUILD_NUMBER=$GITHUB_RUN_NUMBER
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "ビルド番号: $BUILD_NUMBER"

      - name: リリースアーカイブをビルド
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
        run: |
          echo "🏗️ リリースアーカイブビルド開始"
          echo "プロファイル: ${PROFILE_NAME:-BottleKeeper Distribution}"
          echo "Team ID: ${PROFILE_TEAM_ID:-KRVLW3Y2SL}"

          ARCHIVE_SUCCESS=false

          # 名前でアーカイブビルド
          if xcodebuild archive \
            -project BottleKeeper.xcodeproj \
            -scheme BottleKeeper \
            -destination 'generic/platform=iOS' \
            -archivePath $RUNNER_TEMP/BottleKeeper.xcarchive \
            -configuration Release \
            -quiet \
            DEVELOPMENT_TEAM="${PROFILE_TEAM_ID:-KRVLW3Y2SL}" \
            CODE_SIGN_STYLE=Manual \
            CURRENT_PROJECT_VERSION="$BUILD_NUMBER" \
            PROVISIONING_PROFILE_SPECIFIER="${PROFILE_NAME:-BottleKeeper Distribution}"; then
            ARCHIVE_SUCCESS=true
          elif [ -n "$PROFILE_UUID" ]; then
            # UUIDで再試行
            xcodebuild archive \
              -project BottleKeeper.xcodeproj \
              -scheme BottleKeeper \
              -destination 'generic/platform=iOS' \
              -archivePath $RUNNER_TEMP/BottleKeeper.xcarchive \
              -configuration Release \
              -quiet \
              DEVELOPMENT_TEAM="${PROFILE_TEAM_ID:-KRVLW3Y2SL}" \
              CODE_SIGN_STYLE=Manual \
              CURRENT_PROJECT_VERSION="$BUILD_NUMBER" \
              PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" && ARCHIVE_SUCCESS=true
          fi

          # アーカイブの確認
          if [ "$ARCHIVE_SUCCESS" = true ] && [ -d "$RUNNER_TEMP/BottleKeeper.xcarchive" ]; then
            echo "✅ アーカイブビルド完了"
          else
            echo "❌ アーカイブビルド失敗"
            exit 1
          fi

      - name: IPAをエクスポート
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
        run: |
          echo "📦 IPAエクスポート開始"

          # ExportOptions.plistを動的生成
          cp ExportOptions.plist $RUNNER_TEMP/ExportOptions.plist
          sed -i '' "s/BottleKeeper Distribution/${PROFILE_NAME:-BottleKeeper Distribution}/g" $RUNNER_TEMP/ExportOptions.plist
          sed -i '' "s/KRVLW3Y2SL/$PROFILE_TEAM_ID/g" $RUNNER_TEMP/ExportOptions.plist

          # IPAエクスポート
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/BottleKeeper.xcarchive \
            -exportPath $RUNNER_TEMP/ipa \
            -exportOptionsPlist $RUNNER_TEMP/ExportOptions.plist \
            -quiet

          echo "✅ IPAエクスポート完了"

      - name: ビルド成果物をアップロード
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: BottleKeeper-IPA
          path: ${{ runner.temp }}/ipa/

      - name: クリーンアップ
        if: always()
        run: |
          # キーチェーンを削除
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
          # プロビジョニングプロファイルを削除
          rm -f ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision || true

  # TestFlight配信ジョブ（オプション）
  deploy-testflight:
    name: TestFlightへ配信
    runs-on: macos-14 # iOS 26 Beta問題を回避するためmacOS-14を使用
    needs: build
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: IPAをダウンロード
        uses: actions/download-artifact@v4
        with:
          name: BottleKeeper-IPA
          path: ./ipa

      - name: Rubyのセットアップ
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: fastlaneでTestFlightへアップロード
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          echo "🚀 TestFlightへアップロード中..."

          # fastlaneでTestFlightにアップロード
          bundle exec fastlane beta

          echo "✅ TestFlightへのアップロード完了"
          echo "🔗 https://appstoreconnect.apple.com"

      - name: Slackへ通知（オプション）
        if: success() && env.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "BottleKeeper v${{ github.run_number }} がTestFlightに配信されました！",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*🚀 BottleKeeper がTestFlightに配信されました*\n• ビルド番号: ${{ github.run_number }}\n• ブランチ: ${{ github.ref_name }}\n• コミット: ${{ github.sha }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || '' }}