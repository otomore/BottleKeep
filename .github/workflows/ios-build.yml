name: iOS アプリビルド

# トリガー設定
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # 手動実行を許可

env:
  XCODE_VERSION: '15.0' # 使用するXcodeのバージョン
  SCHEME: 'BottleKeep'
  PROJECT_PATH: 'BottleKeep.xcodeproj' # プロジェクトファイルのパス
  BUNDLE_ID: 'com.bottlekeep.app'

jobs:
  # テスト実行ジョブ
  test:
    name: ユニットテスト実行
    runs-on: macos-14 # 最新のmacOSランナーを使用

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: Xcodeバージョンを設定
        run: |
          sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
          xcodebuild -version

      - name: Xcodeプロジェクトを生成
        run: |
          # 既存のプロジェクトファイルが存在しない場合のみ生成
          if [ ! -f "${{ env.PROJECT_PATH }}" ]; then
            echo "Xcodeプロジェクトを生成します..."

            # iOS Appテンプレートを使用してプロジェクトを作成
            mkdir -p "${{ env.PROJECT_PATH }}"

            # 基本的なプロジェクト構造を作成
            cat > project.yml << 'EOF'
            name: BottleKeep
            options:
              bundleIdPrefix: com.bottlekeep
            targets:
              BottleKeep:
                type: application
                platform: iOS
                deploymentTarget: "16.0"
                sources:
                  - BottleKeep
                settings:
                  PRODUCT_BUNDLE_IDENTIFIER: com.bottlekeep.app
                  MARKETING_VERSION: "1.0"
                  CURRENT_PROJECT_VERSION: "1"
            EOF

            # XcodeGenがない場合はswift packageを使用
            echo "Swift Packageとして設定..."
            swift package generate-xcodeproj --skip-extra-files
          fi

      - name: Swift Package Managerの依存関係を解決
        run: |
          if [ -f "${{ env.PROJECT_PATH }}" ]; then
            xcodebuild -resolvePackageDependencies \
              -project ${{ env.PROJECT_PATH }} \
              -scheme ${{ env.SCHEME }}
          else
            echo "プロジェクトファイルが見つかりません。Swift Packageとしてビルドします。"
          fi

      - name: ユニットテストを実行
        run: |
          xcodebuild test \
            -project ${{ env.PROJECT_PATH }} \
            -scheme ${{ env.SCHEME }} \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
            -resultBundlePath TestResults \
            -enableCodeCoverage YES

      - name: テスト結果をアップロード
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: TestResults

  # ビルドジョブ
  build:
    name: アプリビルド
    runs-on: macos-14
    needs: test # テストが成功した後に実行

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: Xcodeバージョンを設定
        run: |
          sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
          xcodebuild -version

      - name: 証明書とプロビジョニングプロファイルをインストール
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # 証明書とプロビジョニングプロファイルのパスを作成
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Base64デコードして保存
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # 一時的なキーチェーンを作成
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # 証明書をインポート
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # プロビジョニングプロファイルをインストール
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: ビルド番号を設定
        run: |
          BUILD_NUMBER=$GITHUB_RUN_NUMBER
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV

          # Info.plistのビルド番号を更新
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" "BottleKeep/BottleKeep/Info.plist"

      - name: アーカイブをビルド
        run: |
          xcodebuild archive \
            -project ${{ env.PROJECT_PATH }} \
            -scheme ${{ env.SCHEME }} \
            -configuration Release \
            -archivePath $RUNNER_TEMP/BottleKeep.xcarchive \
            -allowProvisioningUpdates \
            DEVELOPMENT_TEAM=${{ secrets.TEAM_ID }}

      - name: IPAをエクスポート
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/BottleKeep.xcarchive \
            -exportPath $RUNNER_TEMP/ipa \
            -exportOptionsPlist ExportOptions.plist

      - name: ビルド成果物をアップロード
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v3
        with:
          name: BottleKeep-IPA
          path: $RUNNER_TEMP/ipa/*.ipa

      - name: クリーンアップ
        if: always()
        run: |
          # キーチェーンを削除
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
          # プロビジョニングプロファイルを削除
          rm -f ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision || true

  # TestFlight配信ジョブ（オプション）
  deploy-testflight:
    name: TestFlightへ配信
    runs-on: macos-14
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: IPAをダウンロード
        uses: actions/download-artifact@v3
        with:
          name: BottleKeep-IPA
          path: ./ipa

      - name: App Store Connectへアップロード
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          # API Keyファイルを作成
          echo "$APP_STORE_CONNECT_API_KEY" > AuthKey.p8

          xcrun altool --upload-app \
            --type ios \
            --file ./ipa/*.ipa \
            --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
            --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID"

      - name: Slackへ通知（オプション）
        if: success()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "BottleKeep v${{ github.run_number }} がTestFlightに配信されました！",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*🚀 BottleKeep がTestFlightに配信されました*\n• ビルド番号: ${{ github.run_number }}\n• ブランチ: ${{ github.ref_name }}\n• コミット: ${{ github.sha }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}